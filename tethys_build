#!/usr/bin/env bash
echo "*** Building Tethys_in_Docker ***"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $SCRIPT_DIR

USER_NAME=$(whoami)
USER_ID=$(id -u)
GROUP_ID=$(id -g)

echo "User Name"
echo $USER_NAME
echo "User ID"
echo $USER_ID
echo "Group ID"
echo $GROUP_ID

if [  $# -eq 0 ]
then
    branch_name=release-candidate-140-1
else
    branch_name=$1
fi

./tethys_change_permission

echo "Stop running containers...."
docker-compose stop

echo "Remove existing containers...."
docker rm -f tethys_in_docker_main
docker rm -f tethys_in_docker_nginx

# remove exiting logs
read -p "Remove existing logs (default: No)? " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
    rm -rf logs/*
fi

# remove geoserver
GEOSERVER_CONTAINER_STATUS=$(docker inspect --format="{{ .State.Running }}" tethys_in_docker_geoserver 2> /dev/null)
if [ -n "$GEOSERVER_CONTAINER_STATUS" ]
then
    read -p "Remove existing geoserver container (default: No)? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        docker rm -f tethys_in_docker_geoserver
    fi
fi


# remove n52wps
WPS_CONTAINER_STATUS=$(docker inspect --format="{{ .State.Running }}" tethys_in_docker_n52wps 2> /dev/null)
if [ -n "$WPS_CONTAINER_STATUS" ]
then
    read -p "Remove existing 52 north wps container (default: No)? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        docker rm -f tethys_in_docker_n52wps
    fi
fi

# remove postgis
DB_REMOVED="N"
POSTGIS_CONTAINER_STATUS=$(docker inspect --format="{{ .State.Running }}" tethys_in_docker_postgis 2> /dev/null)
if [ -n "$POSTGIS_CONTAINER_STATUS" ]
then
    read -p "Remove existing DB (default: No)?" -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        docker rm -f tethys_in_docker_postgis
        DB_REMOVED="Y"
    fi
else
    DB_REMOVED="Y"
fi

# remove all unused docker data volumes
echo "Remove unused docker data volumes...."
docker volume rm $(docker volume ls -qf dangling=true)

# create required folders
rm -rf tethys/*
rm -rf tethys/.*
rm -rf static/*

mkdir -p tethys
mkdir -p static
mkdir -p logs
mkdir -p logs/n52wps
mkdir -p logs/n52wps/supervisor
mkdir -p logs/n52wps/tomcat7

echo "Clone Tethys repo...."
git clone https://github.com/tethysplatform/tethys.git tethys
cd tethys
echo "Using branch " $branch_name
git checkout $branch_name
cd ..
cp -f tethys/requirements.txt tethys_main/

# generate all config files
./tethys_pre_build

echo "Build images...."
docker-compose build

echo "Start containers...."
docker-compose up -d
sleep 10

DB_RESTORED="N"
if [ $DB_REMOVED = "Y" ]
then
    read -p "Restore db table tethys_default from tethys_default.backup (default: No)?" -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        ./tethys_db_restore
        DB_RESTORED="Y"
    fi
fi

echo "Running init-tethys script"
docker exec -it tethys_in_docker_main /bin/bash /tethys_main/init-tethys $USER_ID $GROUP_ID

if [ $DB_RESTORED = "N" ] && [ $DB_REMOVED = "Y" ]
then
    read -p "Create a new Tethys Admin user (default: No)? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        docker exec -it tethys_in_docker_main python manage.py createsuperuser
    fi
fi

echo "Restarting main container...."
docker restart tethys_in_docker_main
wait
echo "Done."
