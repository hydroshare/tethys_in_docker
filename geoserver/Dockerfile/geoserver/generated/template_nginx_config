upstream backend {
  least_conn;
  {% for port in http_ports %}
  server localhost:{{ port }};
  {% endfor %}
}

upstream rest {
  least_conn;
  {% for rest_port in rest_ports %}
  server localhost:{{ rest_port }};
  {% endfor %}
}

server {
  listen 8181;

  server_name tethys_in_docker_geoserver;
  resolver tethys_in_docker_geoserver;

  client_max_body_size 4G;
  charset         utf-8;

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;

  access_log  /var/log/nginx/geoserver_nginx_upstream.log upstreamlog;
  access_log /var/log/nginx/geoserver_nginx_access.log main;
  error_log /var/log/nginx/geoserver_nginx_error.log warn;

  # access_log  '/var/log/nginx/geoserver_nginx_headers.log' 'json';
  #set $log_line '';
  #log_by_lua '
  #  local cjson = require "cjson"
  #  local json = cjson.new()
  #  local log_line = {}
  #
  #  log_line.request = {}
  #  log_line.request.remoteAddress = ngx.var.remote_addr
  #  log_line.request.protocol = ngx.var.server_protocol
  #  log_line.request.method = ngx.req.get_method()
  #  log_line.request.url = {}
  #  log_line.request.url.host = ngx.var.host
  #  log_line.request.url.uri = ngx.var.request_uri
  #  log_line.request.headers = ngx.req.get_headers()
  #
  #  log_line.response = {}
  #  log_line.response.headers = ngx.resp.get_headers()
  #
  #  ngx.var.log_line = json.encode(log_line)
  #';

  location /geoserver/ {
    proxy_pass http://backend;
  }

  # Pass web and login requests to first node
  location /geoserver/j_spring_security {
    proxy_pass http://localhost:{{ http_ports[0] }};
  }

  location /geoserver/web/ {
    proxy_pass http://localhost:{{ http_ports[0] }};
  }

  # Pass REST requests to the nodes enabled for REST
  location /geoserver/rest/ {
    proxy_pass http://rest;
  }

  location /geoserver/gwc/rest/ {
    proxy_pass http://rest;
  }
}